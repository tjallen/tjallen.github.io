{"version":3,"sources":["main.js"],"names":["clearBoard","cb","console","log","Grid","cells","Game","stats","generation","y","board","rows","x","cols","push","Cell","create","invertCellState","c","status","change","events","targX","targY","render","currentInteractedCells","cellInteract","event","type","Math","floor","clientX","window","scrollX","canvas","offsetLeft","clientY","scrollY","offsetTop","findCell","passedCellX","passedCellY","addShape","pattern","initShape","xOffset","yOffset","i","length","livingCells","getLivingCellCount","rules","dragging","lastEventX","lastEventY","cellW","cellH","$canvas","$","$start","$stop","$onestep","$clear","$genCounter","$cellCounter","$tumbler","$glider","$glidergun","$ten","document","getElementById","width","height","$ctx","getContext","on","buttonHandler","startGenerationProgress","stopGenerationProgress","step","autoStep","setInterval","intCB","attr","addClass","removeAttr","removeClass","clearInterval","newGeneration","newGenCells","forEach","cell","nextState","n","neighboursAlive","theCell","undefined","nbz","nbzAlive","count","updateStats","html","specifiedCells","iterableCells","renderCount","Array","isArray","fillStyle","styles","alive","dead","cellX","cellY","strokeStyle","fillRect","strokeRect","state","newCell","Object","this","action","possibleNeighbours","mousedown","button","mouseup","mousemove","addEventListener","preventDefault","Shapes","glider","glidergun","tumbler","ten","siblings"],"mappings":"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","file":"main.js","sourcesContent":["// game data obj\nvar Game = {\n  stats: {\n    generation: 0,\n    get livingCells() {\n      return Grid.getLivingCellCount()\n    }\n  },\n  rules: {},\n  events: {\n    currentInteractedCells: [],\n    dragging: false,\n    passedCellX: 0,\n    passedCellY: 0,\n    lastEventX: null,\n    lastEventY: null\n  },\n  board: {\n    cols: 80,\n    rows: 50,\n    cellW: 10,\n    cellH: 10\n  }\n};\n\n// DOM cache\n// game canvas\nvar $canvas = $('#game'),\n// buttons\n    $start = $('#start'),\n    $stop = $('#stop'),\n    $onestep = $('#onestep'),\n    $clear = $('#clear'),\n    $genCounter = $('#gencounter'),\n    $cellCounter = $('#cellcounter'),\n// shapes\n    $tumbler = $('#tumbler'),\n    $glider = $('#glider'),\n    $glidergun = $('#glidergun'),\n    $ten = $('#ten');\n\n// canvas dommerino\nvar canvas = document.getElementById('game');\ncanvas.width = Game.board.cols * Game.board.cellW;\ncanvas.height = Game.board.rows * Game.board.cellH;\nvar $ctx = $canvas[0].getContext('2d');\n\n// controls click handlers\n$start.on('click', function() {\n  buttonHandler.startGenerationProgress();\n});\n$stop.on('click', function() {\n  buttonHandler.stopGenerationProgress();\n});\n\n$onestep.on('click', function() {\n  Grid.step(Grid.render);\n});\n\n$clear.on('click', function() {\n  buttonHandler.stopGenerationProgress();\n  clearBoard(Grid.render);\n});\n\nvar buttonHandler = (function() {\n  var autoStep;\n  function startGenerationProgress() {\n    autoStep = setInterval(intCB, 150);\n    $start.attr('disabled', 'disabled');\n    $start.addClass('selected');\n    $stop.removeAttr('disabled', 'disabled');\n    $stop.removeClass('selected');\n  }\n  function stopGenerationProgress() {\n    clearInterval(autoStep);\n    $stop.attr('disabled', 'disabled');\n    $stop.addClass('selected');\n    $start.removeAttr('disabled', 'disabled');\n    $start.removeClass('selected');\n  }\n  function intCB() {\n    Grid.step(Grid.render);\n    \n  }\n  return {\n    startGenerationProgress: startGenerationProgress,\n    stopGenerationProgress: stopGenerationProgress\n  };\n})();\n\n// gridderino\nvar Grid = {\n  cells: [],\n  // switch out array to new states\n  newGeneration: function() {\n    var oldBoys = Grid.cells;\n    var newGenCells = [];\n    Grid.cells.forEach( function (cell) {\n      // will the cell live or die next generation\n      var nextState;\n      // check the cell's neighbours and define nextState below\n      var n = Grid.neighboursAlive(cell.x, cell.y);\n      // starved/lonely :(\n      if ((cell.status === 1) && (n < 2)) {\n        nextState = 0;\n      // overpop\n    } else if ((cell.status === 1) && (n > 3)) {\n        nextState = 0;\n      // reproduction\n    } else if ((cell.status === 0) && (n === 3)) {\n        nextState = 1;\n      // nothing / stasis\n      } else {\n        nextState = cell.status;\n        // age++?\n      }\n      newGenCells.push(Cell.create(cell.x,cell.y,nextState));\n    });\n    return newGenCells;\n  },\n  // step one generation further\n  step: function(cb) {\n    // increment counter\n    Game.stats.generation++;\n    // send the new generation of cells to the grid\n    Grid.cells = Grid.newGeneration();\n    if (cb && typeof(cb) === 'function') {\n      cb();\n    }\n  },\n  // retrieve cell at coords from Grid.cells array\n  findCell: function(x, y) {\n    // simulate toroidal array wrapping\n    x = (Game.board.cols + x) % Game.board.cols;\n    y = (Game.board.rows + y) % Game.board.rows;\n    var theCell = Grid.cells[Game.board.cols * y + x];\n    if (theCell !== undefined) {\n      return theCell;\n    }\n  },\n  // get number of alive neighbours. could use a redo\n  neighboursAlive: function (x, y) {\n    var nbz = [\n    Grid.findCell(x-1, y-1),\n    Grid.findCell(x, y-1),\n    Grid.findCell(x+1, y-1),\n    Grid.findCell(x+1, y),\n    Grid.findCell(x+1, y+1),\n    Grid.findCell(x, y+1),\n    Grid.findCell(x-1, y+1),\n    Grid.findCell(x-1, y)\n    ];\n    var nbzAlive = 0;\n    for (i = 0; i < nbz.length; i++) {\n      if ((nbz[i] !== undefined) && (nbz[i].status === 1)) {\n        nbzAlive++;\n      }\n    }\n    return nbzAlive;\n  },\n  // cell stats methods\n  getLivingCellCount: function() {\n    var count = 0;\n    Grid.cells.forEach( function(cell) {\n      if (cell.status === 1) count++;\n    });\n    return count;\n  },\n  updateStats: function() {\n    $genCounter.html(Game.stats.generation);\n    $cellCounter.html(Game.stats.livingCells);\n  },\n  // re-render cells\n  // every cell in the grid if no params\n  // if passed an array, just render those specified cells\n  render: function(specifiedCells) {\n    var iterableCells = (specifiedCells ? specifiedCells : Grid.cells);\n    var renderCount = 0;\n    if (Array.isArray(iterableCells)) {\n      iterableCells.forEach( function (cell) {\n        renderCount++;\n        if (cell.status) {\n          $ctx.fillStyle = Cell.styles.alive;\n        } else {\n          $ctx.fillStyle = Cell.styles.dead;\n        }\n         var cellX = (((Math.floor(cell.x)) / 10) * 100);\n         var cellY = (((Math.floor(cell.y)) / 10) * 100);\n         $ctx.strokeStyle = '#EEEEEE';\n         //$ctx.lineWidth = 0;\n         $ctx.fillRect(cellX, cellY, Game.board.cellW, Game.board.cellH);\n         $ctx.strokeRect(cellX, cellY, Game.board.cellW, Game.board.cellH);\n      });\n    }\n    console.log(renderCount + ' cells rendered by Grid.render()');\n    Grid.updateStats();\n  },\n};\n\n// cellerino\nvar Cell = {\n  styles: {\n    dead: '#F5F5F5',\n    alive: '#263238'\n  },\n  create: function(x, y, state) {\n    var newCell = Object.create(this);\n    newCell.x = x;\n    newCell.y = y;\n    newCell.status = state;\n    newCell.nextState = undefined;\n    // newCell.neighbours = 0;\n    return newCell;\n  },\n  // change state of cell dead->alive or alive->dead\n  change: function(x, y, action) {\n    var c = Grid.findCell(x, y);\n    if (action === 0) {\n      c.status = 0;\n    }\n    if (action === 1) {\n      c.status = 1;\n    }\n  },\n  // coords\n  x: 0,\n  y: 0,\n  // change this yo. 0 => 'DEAD', 1 => 'ALIVE'?\n  status: 0,\n  //neighbours: 0,\n  possibleNeighbours: [\n    [this.x-1, this.y-1],\n    [this.x, this.y-1],\n    [this.x+1, this.y-1],\n    [this.x+1, this.y],\n    [this.x+1, this.y+1],\n    [this.x, this.y+1],\n    [this.x-1, this.y+1],\n    [this.x-1, this.y]\n    ],\n};\n\n// kill all cells\nfunction clearBoard(cb) {\n  console.log('clearing board');\n  Grid.cells = [];\n  Game.stats.generation = 0;\n  for (y = 0; y < Game.board.rows; y++) {\n    for (x = 0; x < Game.board.cols; x++) {\n      Grid.cells.push(Cell.create(x,y,0));\n    }\n  }\n  if (cb && typeof(cb) === 'function') {\n    cb();\n  }\n}\n\n// cell events\n// merge this later\nfunction invertCellState(c) {\n  console.log('invertCellState', c);\n  if (c.status === 1) {\n    Cell.change(Game.events.targX, Game.events.targY, 0);\n    Grid.render(Game.events.currentInteractedCells);\n  } else {\n    Cell.change(Game.events.targX, Game.events.targY, 1);\n    Grid.render(Game.events.currentInteractedCells);\n  }\n}\n\nfunction cellInteract(event) {\n  // if (event.type === 'mousedown' && event.button !== 0) return;\n  console.log('cellInteract', event.type);\n  var targX = Math.floor(((event.clientX + window.scrollX) - canvas.offsetLeft) / 10);\n  var targY = Math.floor(((event.clientY + window.scrollY) - canvas.offsetTop) / 10);\n  Game.events.targX = targX;\n  Game.events.targY = targY;;\n  var c = Grid.findCell(Game.events.targX, Game.events.targY);\n  if (event.type === 'mousedown') {\n    Game.events.currentInteractedCells.push(c);\n    invertCellState(c);\n  }\n  if ((event.type === 'mousemove') && (c.x !== Game.events.passedCellX || c.y !== Game.events.passedCellY )) {\n    Game.events.currentInteractedCells.push(c);\n    invertCellState(c);  \n  }\n  Game.events.passedCellX = c.x;\n  Game.events.passedCellY = c.y;\n}\n\n$canvas.mousedown(function() {\n  if (event.button !== 0) return;\n  cellInteract(event);\n  Game.events.dragging = true;\n})\n.mouseup(function() {\n  Game.events.dragging = false;\n})\n.mousemove(function() {\n  if (Game.events.dragging === false) return;\n  cellInteract(event);\n});\n// prevent weird behaviour when dragged outside window\n$(window).mouseup(function() {\n  Game.events.dragging = false;\n  Game.events.currentInteractedCells = [];\n});\n\n// debug info on rightclick\ncanvas.addEventListener('contextmenu', function(event){\n  event.preventDefault();\n  var targX = Math.floor(((event.clientX + window.scrollX) - canvas.offsetLeft) / 10);\n  var targY = Math.floor(((event.clientY + window.scrollY) - canvas.offsetTop) / 10);\n  console.log('========== debug =========');\n  console.log('nbz: ' + Grid.neighboursAlive(targX, targY));\n  console.log(Grid.findCell(targX, targY));\n});\n\n// preset shapes\nvar Shapes = {\n  glider: [\n    [2,1],[3,2],[3,3],[2,3],[1,3]\n  ],\n  glidergun: [\n    [24, 0], [22, 1], [24, 1], [12, 2], [13, 2],\n    [20, 2], [21, 2], [34, 2], [35, 2], [11, 3],\n    [15, 3], [20, 3], [21, 3], [34, 3], [35, 3],\n    [0, 4], [1, 4], [10, 4], [16, 4], [20, 4],\n    [21, 4], [0, 5], [1, 5], [10, 5], [14, 5],\n    [16, 5], [17, 5], [22, 5], [24, 5], [10, 6],\n    [16, 6], [24, 6], [11, 7], [15, 7], [12, 8],\n    [13, 8]\n  ],\n  tumbler: [\n    [0,3], [0,4], [0,5], [1,0], [1,1], [1,5], [2,0], [2,1], [2,2], [2,3], [2,4], [4,0], [4,1], [4,2], [4,3], [4,4], [5,0], [5,1], [5,5], [6,3], [6,4], [6,5]\n  ],\n  ten: [\n    [0,0],[1,0],[2,0],[3,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],\n  ]\n};\n\n// shapes click handlers (req DRY de-shite-ening, add into button module etc)\n$('.shapes button').on('click', function() {\n  $(this).attr('disabled','disabled');\n  $(this).siblings().removeAttr('disabled','disabled');\n  $(this).addClass('selected');\n  $(this).siblings().removeClass('selected');\n  clearBoard();\n});\n\n$glider.on('click', function() {\n  addShape(Shapes.glider, Grid.render);\n});\n\n$tumbler.on('click', function() {\n  addShape(Shapes.tumbler, Grid.render);\n});\n\n$ten.on('click', function() {\n  addShape(Shapes.ten, Grid.render);\n});\n\n$glidergun.on('click', function() {\n  addShape(Shapes.glidergun, Grid.render);\n});\n\nfunction addShape(pattern, cb) {\n  var initShape = pattern || [];\n  var xOffset = Game.board.cols / 2;\n  var yOffset = Game.board.rows / 2;\n  for (var i = 0; i < initShape.length; i++) {\n    Cell.change((initShape[i][0] + xOffset),(initShape[i][1] + yOffset), 1);\n  }\n  if (cb && typeof(cb) === 'function') {\n    cb();\n  }\n}\n\n// call initial state\n(function()  {\n  clearBoard();\n  addShape(Shapes.glidergun, Grid.render);\n  $glidergun.attr('disabled','disabled');\n  $glidergun.addClass('selected');\n  buttonHandler.stopGenerationProgress();\n})();\n"],"sourceRoot":"/source/"}